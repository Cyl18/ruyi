name: PR checks

on:
  push:
    paths:
      - pyproject.toml
      - poetry.lock
      - '**.py'
      - '.github/**'
      - 'resources/**'
      - 'scripts/**'
      - 'tests/**'
  pull_request:
    paths:
      - pyproject.toml
      - poetry.lock
      - '**.py'
      - '.github/**'
      - 'resources/**'
      - 'scripts/**'
      - 'tests/**'

jobs:
  lint:
    name: "lint & typecheck & test (Python ${{ matrix.python }}${{ matrix.baseline && ', baseline deps' || '' }}${{ matrix.experimental && ', experimental' || '' }})"
    runs-on: ${{ matrix.runs_on }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: true
      matrix:
        python:
          - '3.10'
          - '3.11'
          - '3.12'
        experimental: [false]
        baseline: [false]
        runs_on: ['ubuntu-latest']
        include:
          - python: '3.13'
            baseline: false
            experimental: true
            runs_on: ubuntu-latest
          - python: '3.10'
            baseline: true
            experimental: false
            runs_on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps system-wide
        if: success() && matrix.baseline
        run: |
          ./scripts/install-baseline-deps.sh
          # Install poetry with access to the system-wide deps
          pipx install --system-site-packages poetry
          # also give the Poetry environment access to the system-wide deps
          # should it want to create its own venv
          export POETRY_VIRTUALENVS_OPTIONS_SYSTEM_SITE_PACKAGES=true

      - name: Install Poetry
        if: success() && !matrix.baseline
        run: pipx install poetry

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: poetry

      - name: Install deps in the venv
        if: success() && !matrix.baseline
        run: poetry install --with=dev
      - name: Install only the dev tools in the venv
        if: success() && matrix.baseline
        run: poetry install --only=dev

      - name: Lint with ruff
        run: poetry run ruff check
      - name: Type-check with mypy
        # it is rather cumbersome to work with ancient versions of deps that
        # lack type annotations, so just rely on the CI job running with
        # non-baseline deps
        if: success() && !matrix.baseline
        run: poetry run mypy
      - name: Type-check with pyright
        # same with pyright
        if: success() && !matrix.baseline
        run: poetry run -- pyright --pythonversion ${{ matrix.python }}
      - name: Test with pytest
        run: poetry run pytest

  pylic:
    name: license compatibility
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          cache: poetry
      - name: Install runtime deps
        run: poetry install --only=main,dev
      - name: Install pylic
        run: poetry run pip install pylic
      - name: List all licenses involved
        run: poetry run pylic list
      - name: Check license compatibility with pylic
        run: poetry run pylic check

  shellcheck:
    name: Lint shell scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lint with shellcheck
        run: ./scripts/lint-shell-scripts.sh
